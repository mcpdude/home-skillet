// Mocks generated by Mockito 5.4.5 from annotations
// in home_skillet_mobile/test/unit/supabase_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:realtime_client/src/constants.dart' as _i7;
import 'package:realtime_client/src/push.dart' as _i3;
import 'package:realtime_client/src/types.dart' as _i6;
import 'package:supabase/supabase.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFunctionsClient_0 extends _i1.SmartFake
    implements _i2.FunctionsClient {
  _FakeFunctionsClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStorageClient_1 extends _i1.SmartFake
    implements _i2.SupabaseStorageClient {
  _FakeSupabaseStorageClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeClient_2 extends _i1.SmartFake
    implements _i2.RealtimeClient {
  _FakeRealtimeClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestClient_3 extends _i1.SmartFake
    implements _i2.PostgrestClient {
  _FakePostgrestClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoTrueClient_4 extends _i1.SmartFake implements _i2.GoTrueClient {
  _FakeGoTrueClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_5 extends _i1.SmartFake
    implements _i2.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQuerySchema_6 extends _i1.SmartFake
    implements _i2.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestFilterBuilder_7<T1> extends _i1.SmartFake
    implements _i2.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeChannel_8 extends _i1.SmartFake
    implements _i2.RealtimeChannel {
  _FakeRealtimeChannel_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePush_9 extends _i1.SmartFake implements _i3.Push {
  _FakePush_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimePresence_10 extends _i1.SmartFake
    implements _i2.RealtimePresence {
  _FakeRealtimePresence_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestQueryBuilder_11<T1> extends _i1.SmartFake
    implements _i2.PostgrestQueryBuilder<T1> {
  _FakePostgrestQueryBuilder_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestBuilder_12<T1, S, R> extends _i1.SmartFake
    implements _i2.PostgrestBuilder<T1, S, R> {
  _FakePostgrestBuilder_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_13 extends _i1.SmartFake implements Uri {
  _FakeUri_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_14<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestTransformBuilder_15<T1> extends _i1.SmartFake
    implements _i2.PostgrestTransformBuilder<T1> {
  _FakePostgrestTransformBuilder_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponsePostgrestBuilder_16<T1, S, R> extends _i1.SmartFake
    implements _i2.ResponsePostgrestBuilder<T1, S, R> {
  _FakeResponsePostgrestBuilder_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i2.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FunctionsClient get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFunctionsClient_0(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i2.FunctionsClient);

  @override
  set functions(_i2.FunctionsClient? _functions) => super.noSuchMethod(
        Invocation.setter(
          #functions,
          _functions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.SupabaseStorageClient get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeSupabaseStorageClient_1(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.SupabaseStorageClient);

  @override
  set storage(_i2.SupabaseStorageClient? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RealtimeClient get realtime => (super.noSuchMethod(
        Invocation.getter(#realtime),
        returnValue: _FakeRealtimeClient_2(
          this,
          Invocation.getter(#realtime),
        ),
      ) as _i2.RealtimeClient);

  @override
  set realtime(_i2.RealtimeClient? _realtime) => super.noSuchMethod(
        Invocation.setter(
          #realtime,
          _realtime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.PostgrestClient get rest => (super.noSuchMethod(
        Invocation.getter(#rest),
        returnValue: _FakePostgrestClient_3(
          this,
          Invocation.getter(#rest),
        ),
      ) as _i2.PostgrestClient);

  @override
  set rest(_i2.PostgrestClient? _rest) => super.noSuchMethod(
        Invocation.setter(
          #rest,
          _rest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_4(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i2.GoTrueClient);

  @override
  _i2.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [table],
        ),
        returnValue: _FakeSupabaseQueryBuilder_5(
          this,
          Invocation.method(
            #from,
            [table],
          ),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i2.SupabaseQuerySchema schema(String? schema) => (super.noSuchMethod(
        Invocation.method(
          #schema,
          [schema],
        ),
        returnValue: _FakeSupabaseQuerySchema_6(
          this,
          Invocation.method(
            #schema,
            [schema],
          ),
        ),
      ) as _i2.SupabaseQuerySchema);

  @override
  _i2.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
    dynamic get = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [fn],
          {
            #params: params,
            #get: get,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #rpc,
            [fn],
            {
              #params: params,
              #get: get,
            },
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.RealtimeChannel channel(
    String? name, {
    _i2.RealtimeChannelConfig? opts = const _i2.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [name],
          {#opts: opts},
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #channel,
            [name],
            {#opts: opts},
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  List<_i2.RealtimeChannel> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: <_i2.RealtimeChannel>[],
      ) as List<_i2.RealtimeChannel>);

  @override
  _i4.Future<String> removeChannel(_i2.RealtimeChannel? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #removeChannel,
            [channel],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<String>> removeAllChannels() => (super.noSuchMethod(
        Invocation.method(
          #removeAllChannels,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [RealtimeChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockRealtimeChannel extends _i1.Mock implements _i2.RealtimeChannel {
  MockRealtimeChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get joinedOnce => (super.noSuchMethod(
        Invocation.getter(#joinedOnce),
        returnValue: false,
      ) as bool);

  @override
  set joinedOnce(bool? _joinedOnce) => super.noSuchMethod(
        Invocation.setter(
          #joinedOnce,
          _joinedOnce,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Push get joinPush => (super.noSuchMethod(
        Invocation.getter(#joinPush),
        returnValue: _FakePush_9(
          this,
          Invocation.getter(#joinPush),
        ),
      ) as _i3.Push);

  @override
  set joinPush(_i3.Push? _joinPush) => super.noSuchMethod(
        Invocation.setter(
          #joinPush,
          _joinPush,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RealtimePresence get presence => (super.noSuchMethod(
        Invocation.getter(#presence),
        returnValue: _FakeRealtimePresence_10(
          this,
          Invocation.getter(#presence),
        ),
      ) as _i2.RealtimePresence);

  @override
  set presence(_i2.RealtimePresence? _presence) => super.noSuchMethod(
        Invocation.setter(
          #presence,
          _presence,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get broadcastEndpointURL => (super.noSuchMethod(
        Invocation.getter(#broadcastEndpointURL),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#broadcastEndpointURL),
        ),
      ) as String);

  @override
  set broadcastEndpointURL(String? _broadcastEndpointURL) => super.noSuchMethod(
        Invocation.setter(
          #broadcastEndpointURL,
          _broadcastEndpointURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get subTopic => (super.noSuchMethod(
        Invocation.getter(#subTopic),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#subTopic),
        ),
      ) as String);

  @override
  String get topic => (super.noSuchMethod(
        Invocation.getter(#topic),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#topic),
        ),
      ) as String);

  @override
  Map<String, dynamic> get params => (super.noSuchMethod(
        Invocation.getter(#params),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  set params(Map<String, dynamic>? _params) => super.noSuchMethod(
        Invocation.setter(
          #params,
          _params,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RealtimeClient get socket => (super.noSuchMethod(
        Invocation.getter(#socket),
        returnValue: _FakeRealtimeClient_2(
          this,
          Invocation.getter(#socket),
        ),
      ) as _i2.RealtimeClient);

  @override
  bool get canPush => (super.noSuchMethod(
        Invocation.getter(#canPush),
        returnValue: false,
      ) as bool);

  @override
  String get joinRef => (super.noSuchMethod(
        Invocation.getter(#joinRef),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#joinRef),
        ),
      ) as String);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get isErrored => (super.noSuchMethod(
        Invocation.getter(#isErrored),
        returnValue: false,
      ) as bool);

  @override
  bool get isJoined => (super.noSuchMethod(
        Invocation.getter(#isJoined),
        returnValue: false,
      ) as bool);

  @override
  bool get isJoining => (super.noSuchMethod(
        Invocation.getter(#isJoining),
        returnValue: false,
      ) as bool);

  @override
  bool get isLeaving => (super.noSuchMethod(
        Invocation.getter(#isLeaving),
        returnValue: false,
      ) as bool);

  @override
  void rejoinUntilConnected() => super.noSuchMethod(
        Invocation.method(
          #rejoinUntilConnected,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RealtimeChannel subscribe([
    void Function(
      _i2.RealtimeSubscribeStatus,
      Object?,
    )? callback,
    Duration? timeout,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [
            callback,
            timeout,
          ],
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #subscribe,
            [
              callback,
              timeout,
            ],
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  List<_i2.SinglePresenceState> presenceState() => (super.noSuchMethod(
        Invocation.method(
          #presenceState,
          [],
        ),
        returnValue: <_i2.SinglePresenceState>[],
      ) as List<_i2.SinglePresenceState>);

  @override
  _i4.Future<_i2.ChannelResponse> track(
    Map<String, dynamic>? payload, [
    Map<String, dynamic>? opts = const {},
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #track,
          [
            payload,
            opts,
          ],
        ),
        returnValue:
            _i4.Future<_i2.ChannelResponse>.value(_i2.ChannelResponse.ok),
      ) as _i4.Future<_i2.ChannelResponse>);

  @override
  _i4.Future<_i2.ChannelResponse> untrack(
          [Map<String, dynamic>? opts = const {}]) =>
      (super.noSuchMethod(
        Invocation.method(
          #untrack,
          [opts],
        ),
        returnValue:
            _i4.Future<_i2.ChannelResponse>.value(_i2.ChannelResponse.ok),
      ) as _i4.Future<_i2.ChannelResponse>);

  @override
  _i2.RealtimeChannel onPostgresChanges({
    required _i2.PostgresChangeEvent? event,
    String? schema,
    String? table,
    _i2.PostgresChangeFilter? filter,
    required void Function(_i2.PostgresChangePayload)? callback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onPostgresChanges,
          [],
          {
            #event: event,
            #schema: schema,
            #table: table,
            #filter: filter,
            #callback: callback,
          },
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #onPostgresChanges,
            [],
            {
              #event: event,
              #schema: schema,
              #table: table,
              #filter: filter,
              #callback: callback,
            },
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  _i2.RealtimeChannel onBroadcast({
    required String? event,
    required void Function(Map<String, dynamic>)? callback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onBroadcast,
          [],
          {
            #event: event,
            #callback: callback,
          },
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #onBroadcast,
            [],
            {
              #event: event,
              #callback: callback,
            },
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  _i2.RealtimeChannel onPresenceSync(
          void Function(_i2.RealtimePresenceSyncPayload)? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #onPresenceSync,
          [callback],
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #onPresenceSync,
            [callback],
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  _i2.RealtimeChannel onPresenceJoin(
          void Function(_i2.RealtimePresenceJoinPayload)? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #onPresenceJoin,
          [callback],
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #onPresenceJoin,
            [callback],
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  _i2.RealtimeChannel onPresenceLeave(
          void Function(_i2.RealtimePresenceLeavePayload)? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #onPresenceLeave,
          [callback],
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #onPresenceLeave,
            [callback],
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  _i2.RealtimeChannel onSystemEvents(void Function(dynamic)? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #onSystemEvents,
          [callback],
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #onSystemEvents,
            [callback],
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  _i2.RealtimeChannel onEvents(
    String? type,
    _i6.ChannelFilter? filter,
    _i2.BindingCallback? callback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEvents,
          [
            type,
            filter,
            callback,
          ],
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #onEvents,
            [
              type,
              filter,
              callback,
            ],
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  _i2.RealtimeChannel off(
    String? type,
    Map<String, String>? filter,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #off,
          [
            type,
            filter,
          ],
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #off,
            [
              type,
              filter,
            ],
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  _i3.Push push(
    _i7.ChannelEvents? event,
    Map<String, dynamic>? payload, [
    Duration? timeout,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [
            event,
            payload,
            timeout,
          ],
        ),
        returnValue: _FakePush_9(
          this,
          Invocation.method(
            #push,
            [
              event,
              payload,
              timeout,
            ],
          ),
        ),
      ) as _i3.Push);

  @override
  _i4.Future<_i2.ChannelResponse> sendBroadcastMessage({
    required String? event,
    required Map<String, dynamic>? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendBroadcastMessage,
          [],
          {
            #event: event,
            #payload: payload,
          },
        ),
        returnValue:
            _i4.Future<_i2.ChannelResponse>.value(_i2.ChannelResponse.ok),
      ) as _i4.Future<_i2.ChannelResponse>);

  @override
  _i4.Future<_i2.ChannelResponse> send({
    required _i6.RealtimeListenTypes? type,
    String? event,
    required Map<String, dynamic>? payload,
    Map<String, dynamic>? opts = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
          {
            #type: type,
            #event: event,
            #payload: payload,
            #opts: opts,
          },
        ),
        returnValue:
            _i4.Future<_i2.ChannelResponse>.value(_i2.ChannelResponse.ok),
      ) as _i4.Future<_i2.ChannelResponse>);

  @override
  void updateJoinPayload(Map<String, dynamic>? payload) => super.noSuchMethod(
        Invocation.method(
          #updateJoinPayload,
          [payload],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<String> unsubscribe([Duration? timeout]) => (super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [timeout],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #unsubscribe,
            [timeout],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  dynamic onMessage(
    String? event,
    dynamic payload, [
    String? ref,
  ]) =>
      super.noSuchMethod(Invocation.method(
        #onMessage,
        [
          event,
          payload,
          ref,
        ],
      ));

  @override
  bool isMember(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #isMember,
          [topic],
        ),
        returnValue: false,
      ) as bool);

  @override
  void rejoin([Duration? timeout]) => super.noSuchMethod(
        Invocation.method(
          #rejoin,
          [timeout],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forceRejoin([Duration? timeout]) => super.noSuchMethod(
        Invocation.method(
          #forceRejoin,
          [timeout],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trigger(
    String? type, [
    dynamic payload,
    String? ref,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #trigger,
          [
            type,
            payload,
            ref,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String replyEventName(String? ref) => (super.noSuchMethod(
        Invocation.method(
          #replyEventName,
          [ref],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #replyEventName,
            [ref],
          ),
        ),
      ) as String);
}

/// A class which mocks [PostgrestQueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestQueryBuilder<T> extends _i1.Mock
    implements _i2.PostgrestQueryBuilder<T> {
  MockPostgrestQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostgrestFilterBuilder<List<Map<String, dynamic>>> select(
          [String? columns = '*']) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [columns],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<List<Map<String, dynamic>>>(
          this,
          Invocation.method(
            #select,
            [columns],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<List<Map<String, dynamic>>>);

  @override
  _i2.PostgrestFilterBuilder<T> insert(
    Object? values, {
    bool? defaultToNull = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
          {#defaultToNull: defaultToNull},
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #insert,
            [values],
            {#defaultToNull: defaultToNull},
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> upsert(
    Object? values, {
    String? onConflict,
    bool? ignoreDuplicates = false,
    bool? defaultToNull = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsert,
          [values],
          {
            #onConflict: onConflict,
            #ignoreDuplicates: ignoreDuplicates,
            #defaultToNull: defaultToNull,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #upsert,
            [values],
            {
              #onConflict: onConflict,
              #ignoreDuplicates: ignoreDuplicates,
              #defaultToNull: defaultToNull,
            },
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> update(Map<dynamic, dynamic>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [values],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #update,
            [values],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #delete,
            [],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<int> count(
          [_i2.CountOption? option = _i2.CountOption.exact]) =>
      (super.noSuchMethod(
        Invocation.method(
          #count,
          [option],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<int>(
          this,
          Invocation.method(
            #count,
            [option],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<int>);

  @override
  _i2.PostgrestQueryBuilder<T> setHeader(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setHeader,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakePostgrestQueryBuilder_11<T>(
          this,
          Invocation.method(
            #setHeader,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestQueryBuilder<T>);

  @override
  _i2.PostgrestBuilder<U, U, T> withConverter<U>(
          _i2.PostgrestConverter<U, T>? converter) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [converter],
        ),
        returnValue: _FakePostgrestBuilder_12<U, U, T>(
          this,
          Invocation.method(
            #withConverter,
            [converter],
          ),
        ),
      ) as _i2.PostgrestBuilder<U, U, T>);

  @override
  Uri appendSearchParams(
    String? key,
    String? value, [
    Uri? url,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #appendSearchParams,
          [
            key,
            value,
            url,
          ],
        ),
        returnValue: _FakeUri_13(
          this,
          Invocation.method(
            #appendSearchParams,
            [
              key,
              value,
              url,
            ],
          ),
        ),
      ) as Uri);

  @override
  Uri overrideSearchParams(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overrideSearchParams,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeUri_13(
          this,
          Invocation.method(
            #overrideSearchParams,
            [
              key,
              value,
            ],
          ),
        ),
      ) as Uri);

  @override
  _i4.Stream<T> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i4.Stream<T>.empty(),
      ) as _i4.Stream<T>);

  @override
  _i4.Future<T> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #catchError,
                  [onError],
                  {#test: test},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #catchError,
                [onError],
                {#test: test},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<U> then<U>(
    _i4.FutureOr<U> Function(T)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<U>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (U v) => _i4.Future<U>.value(v),
            ) ??
            _FakeFuture_14<U>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i4.Future<U>);

  @override
  _i4.Future<T> timeout(
    Duration? timeLimit, {
    _i4.FutureOr<T> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #timeout,
                  [timeLimit],
                  {#onTimeout: onTimeout},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #timeout,
                [timeLimit],
                {#onTimeout: onTimeout},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<T> whenComplete(_i4.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #whenComplete,
                  [action],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #whenComplete,
                [action],
              ),
            ),
      ) as _i4.Future<T>);
}

/// A class which mocks [PostgrestFilterBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestFilterBuilder<T> extends _i1.Mock
    implements _i2.PostgrestFilterBuilder<T> {
  MockPostgrestFilterBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostgrestFilterBuilder<T> copyWithUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #copyWithUrl,
          [url],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #copyWithUrl,
            [url],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> not(
    String? column,
    String? operator,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #not,
          [
            column,
            operator,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #not,
            [
              column,
              operator,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> or(
    String? filters, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #or,
          [filters],
          {#referencedTable: referencedTable},
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #or,
            [filters],
            {#referencedTable: referencedTable},
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> eq(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #eq,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #eq,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> neq(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #neq,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #neq,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> gt(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gt,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #gt,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> gte(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gte,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #gte,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> lt(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lt,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #lt,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> lte(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lte,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #lte,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> like(
    String? column,
    String? pattern,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #like,
          [
            column,
            pattern,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #like,
            [
              column,
              pattern,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<dynamic> likeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeAllOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<dynamic>(
          this,
          Invocation.method(
            #likeAllOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.PostgrestFilterBuilder<dynamic> likeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeAnyOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<dynamic>(
          this,
          Invocation.method(
            #likeAnyOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.PostgrestFilterBuilder<T> ilike(
    String? column,
    String? pattern,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilike,
          [
            column,
            pattern,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #ilike,
            [
              column,
              pattern,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<dynamic> ilikeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilikeAllOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<dynamic>(
          this,
          Invocation.method(
            #ilikeAllOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.PostgrestFilterBuilder<dynamic> ilikeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilikeAnyOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<dynamic>(
          this,
          Invocation.method(
            #ilikeAnyOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.PostgrestFilterBuilder<T> isFilter(
    String? column,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFilter,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #isFilter,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> inFilter(
    String? column,
    List<dynamic>? values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #inFilter,
          [
            column,
            values,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #inFilter,
            [
              column,
              values,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> contains(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #contains,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #contains,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> containedBy(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #containedBy,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #containedBy,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeLt(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeLt,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #rangeLt,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeGt(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeGt,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #rangeGt,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeGte(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeGte,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #rangeGte,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeLte(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeLte,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #rangeLte,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeAdjacent(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeAdjacent,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #rangeAdjacent,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> overlaps(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overlaps,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #overlaps,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> textSearch(
    String? column,
    String? query, {
    String? config,
    _i2.TextSearchType? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #textSearch,
          [
            column,
            query,
          ],
          {
            #config: config,
            #type: type,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #textSearch,
            [
              column,
              query,
            ],
            {
              #config: config,
              #type: type,
            },
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> filter(
    String? column,
    String? operator,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filter,
          [
            column,
            operator,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #filter,
            [
              column,
              operator,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> match(Map<String, Object>? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #match,
          [query],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #match,
            [query],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> setHeader(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setHeader,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #setHeader,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<List<Map<String, dynamic>>> select(
          [String? columns = '*']) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [columns],
        ),
        returnValue:
            _FakePostgrestTransformBuilder_15<List<Map<String, dynamic>>>(
          this,
          Invocation.method(
            #select,
            [columns],
          ),
        ),
      ) as _i2.PostgrestTransformBuilder<List<Map<String, dynamic>>>);

  @override
  _i2.PostgrestTransformBuilder<T> order(
    String? column, {
    bool? ascending = false,
    bool? nullsFirst = false,
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #order,
          [column],
          {
            #ascending: ascending,
            #nullsFirst: nullsFirst,
            #referencedTable: referencedTable,
          },
        ),
        returnValue: _FakePostgrestTransformBuilder_15<T>(
          this,
          Invocation.method(
            #order,
            [column],
            {
              #ascending: ascending,
              #nullsFirst: nullsFirst,
              #referencedTable: referencedTable,
            },
          ),
        ),
      ) as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<T> limit(
    int? count, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #limit,
          [count],
          {#referencedTable: referencedTable},
        ),
        returnValue: _FakePostgrestTransformBuilder_15<T>(
          this,
          Invocation.method(
            #limit,
            [count],
            {#referencedTable: referencedTable},
          ),
        ),
      ) as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<T> range(
    int? from,
    int? to, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #range,
          [
            from,
            to,
          ],
          {#referencedTable: referencedTable},
        ),
        returnValue: _FakePostgrestTransformBuilder_15<T>(
          this,
          Invocation.method(
            #range,
            [
              from,
              to,
            ],
            {#referencedTable: referencedTable},
          ),
        ),
      ) as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<Map<String, dynamic>> single() =>
      (super.noSuchMethod(
        Invocation.method(
          #single,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_15<Map<String, dynamic>>(
          this,
          Invocation.method(
            #single,
            [],
          ),
        ),
      ) as _i2.PostgrestTransformBuilder<Map<String, dynamic>>);

  @override
  _i2.PostgrestTransformBuilder<Map<String, dynamic>?> maybeSingle() =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeSingle,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_15<Map<String, dynamic>?>(
          this,
          Invocation.method(
            #maybeSingle,
            [],
          ),
        ),
      ) as _i2.PostgrestTransformBuilder<Map<String, dynamic>?>);

  @override
  _i2.PostgrestTransformBuilder<String> csv() => (super.noSuchMethod(
        Invocation.method(
          #csv,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_15<String>(
          this,
          Invocation.method(
            #csv,
            [],
          ),
        ),
      ) as _i2.PostgrestTransformBuilder<String>);

  @override
  _i2.ResponsePostgrestBuilder<_i2.PostgrestResponse<T>, T, T> count(
          [_i2.CountOption? count = _i2.CountOption.exact]) =>
      (super.noSuchMethod(
        Invocation.method(
          #count,
          [count],
        ),
        returnValue:
            _FakeResponsePostgrestBuilder_16<_i2.PostgrestResponse<T>, T, T>(
          this,
          Invocation.method(
            #count,
            [count],
          ),
        ),
      ) as _i2.ResponsePostgrestBuilder<_i2.PostgrestResponse<T>, T, T>);

  @override
  _i2.PostgrestBuilder<void, void, void> head() => (super.noSuchMethod(
        Invocation.method(
          #head,
          [],
        ),
        returnValue: _FakePostgrestBuilder_12<void, void, void>(
          this,
          Invocation.method(
            #head,
            [],
          ),
        ),
      ) as _i2.PostgrestBuilder<void, void, void>);

  @override
  _i2.ResponsePostgrestBuilder<Map<String, dynamic>,
          Map<String, dynamic>, Map<String, dynamic>>
      geojson() => (super.noSuchMethod(
            Invocation.method(
              #geojson,
              [],
            ),
            returnValue: _FakeResponsePostgrestBuilder_16<Map<String, dynamic>,
                Map<String, dynamic>, Map<String, dynamic>>(
              this,
              Invocation.method(
                #geojson,
                [],
              ),
            ),
          ) as _i2.ResponsePostgrestBuilder<Map<String, dynamic>,
              Map<String, dynamic>, Map<String, dynamic>>);

  @override
  _i2.PostgrestBuilder<String, String, String> explain({
    bool? analyze = false,
    bool? verbose = false,
    bool? settings = false,
    bool? buffers = false,
    bool? wal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #explain,
          [],
          {
            #analyze: analyze,
            #verbose: verbose,
            #settings: settings,
            #buffers: buffers,
            #wal: wal,
          },
        ),
        returnValue: _FakePostgrestBuilder_12<String, String, String>(
          this,
          Invocation.method(
            #explain,
            [],
            {
              #analyze: analyze,
              #verbose: verbose,
              #settings: settings,
              #buffers: buffers,
              #wal: wal,
            },
          ),
        ),
      ) as _i2.PostgrestBuilder<String, String, String>);

  @override
  _i2.PostgrestBuilder<U, U, T> withConverter<U>(
          _i2.PostgrestConverter<U, T>? converter) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [converter],
        ),
        returnValue: _FakePostgrestBuilder_12<U, U, T>(
          this,
          Invocation.method(
            #withConverter,
            [converter],
          ),
        ),
      ) as _i2.PostgrestBuilder<U, U, T>);

  @override
  Uri appendSearchParams(
    String? key,
    String? value, [
    Uri? url,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #appendSearchParams,
          [
            key,
            value,
            url,
          ],
        ),
        returnValue: _FakeUri_13(
          this,
          Invocation.method(
            #appendSearchParams,
            [
              key,
              value,
              url,
            ],
          ),
        ),
      ) as Uri);

  @override
  Uri overrideSearchParams(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overrideSearchParams,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeUri_13(
          this,
          Invocation.method(
            #overrideSearchParams,
            [
              key,
              value,
            ],
          ),
        ),
      ) as Uri);

  @override
  _i4.Stream<T> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i4.Stream<T>.empty(),
      ) as _i4.Stream<T>);

  @override
  _i4.Future<T> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #catchError,
                  [onError],
                  {#test: test},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #catchError,
                [onError],
                {#test: test},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<U> then<U>(
    _i4.FutureOr<U> Function(T)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<U>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (U v) => _i4.Future<U>.value(v),
            ) ??
            _FakeFuture_14<U>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i4.Future<U>);

  @override
  _i4.Future<T> timeout(
    Duration? timeLimit, {
    _i4.FutureOr<T> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #timeout,
                  [timeLimit],
                  {#onTimeout: onTimeout},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #timeout,
                [timeLimit],
                {#onTimeout: onTimeout},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<T> whenComplete(_i4.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #whenComplete,
                  [action],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #whenComplete,
                [action],
              ),
            ),
      ) as _i4.Future<T>);
}
